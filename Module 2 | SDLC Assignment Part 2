/*Fiodor Culacovschi
 * CEN 3024 - Software Development 1
 * September 3rd, 2023
 * LibraryManagementApp.java
 * This simple program simulates the library application at its first stage with various features.
 * To run this program on other PC please download the library.txt file.
 * Create a userCollection.txt file,
 * this is where items will be added and removed by user from personal book collection.
 * Change pathways, run the program.
 * Program menu is displayed.
 * Program can read and display data from a file, file stored on a local machine.
 * User can display the data from a file using menu and interact with.
 * Program allows user to add books to their collection list by: ID, Title, Author.
 * Program displays added items.
 * User can remove book from collection list by entering book ID.
 * Program displays user collection list.
 * Program displays an updated list if user added or removed certain books from the collection.
 * Exit the program.
 */
import java.io.*;
import java.util.*;

public class LibraryManagementApp {
    
	// File paths for library and user collection
	private final String libraryFile = "/Users/fiodorculacovschi/Desktop/SoftwareDev/library.txt";
    private final String userCollectionFile = "/Users/fiodorculacovschi/Desktop/SoftwareDev/userCollection.txt"; // Path to user-specific collection file
   
    // List to store user's book collection
    private List<Book> userCollection;

    
    // Constructor for LibraryManagementApp class
    public LibraryManagementApp() {
        userCollection = new ArrayList<>();
        loadData(); // Load user's collection data from file
    }

    // Display books available in the library file
    public void displayBooksInFile() {
        try (BufferedReader reader = new BufferedReader(new FileReader(libraryFile))) {
            String line;
            System.out.println("Books in the file:");
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
        } catch (IOException e) {
            System.out.println("Error reading from file: " + e.getMessage());
        }
    }

    // Display books in the user's collection from the user collection file
    public void displayUserCollectionFromFile() {
        try (BufferedReader reader = new BufferedReader(new FileReader(userCollectionFile))) {
            String line;
            System.out.println("Books in your collection:");
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
        } catch (IOException e) {
            System.out.println("Error reading from user collection file: " + e.getMessage());
        }
    }

    // Add a book to the user's collection and update the user collection file
    public void addToUserCollection(Book book) {
        userCollection.add(book);
        System.out.println("Book added to your collection: " + book);

        // Append the book to the user collection file
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(userCollectionFile, true))) {
            writer.write(book.toString());
            writer.newLine();
        } catch (IOException e) {
            System.out.println("Error writing to user collection file: " + e.getMessage());
        }
    }
    
    // Create and add a book to the user's collection
    public void addBookToCollection(int id, String title, String author) {
        Book newBook = new Book(id, title, author);
        addToUserCollection(newBook);
    }

    // Remove a book from the user's collection and update the user collection file
    public void removeBookFromCollection(int id) {
        Iterator<Book> iterator = userCollection.iterator();
        while (iterator.hasNext()) {
            Book book = iterator.next();
            if (book.getId() == id) {
                iterator.remove();
                System.out.println("Book removed from your collection: " + book);
                updateCollectionFile(); // Update the user collection file
                return;
            }
        }
        System.out.println("Book with ID " + id + " not found in your collection.");
    }

    
    // Display the user's collection of books
    public void displayUserCollection() {
        System.out.println("Books in your collection:");
        if (userCollection.isEmpty()) {
            System.out.println("No books in your collection.");
        } else {
            for (Book book : userCollection) {
                System.out.println(book);
            }
        }
    }

    
    // Update the user collection file with the current user collection
    private void updateCollectionFile() {
        // Overwrite the user collection file with the updated userCollection list
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(userCollectionFile))) {
            for (Book book : userCollection) {
                writer.write(book.toString());
                writer.newLine();
            }
        } catch (IOException e) {
            System.out.println("Error updating user collection file: " + e.getMessage());
        }
    }

    
    // Load user's collection data from the user collection file
    private void loadData() {
        try (BufferedReader reader = new BufferedReader(new FileReader(userCollectionFile))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 3) {
                    int id = Integer.parseInt(parts[0]);
                    String title = parts[1];
                    String author = parts[2];
                    userCollection.add(new Book(id, title, author));
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading from user collection file: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
    	// Create an instance of LibraryManagementApp
    	LibraryManagementApp libraryManager = new LibraryManagementApp();
    	// Create a Scanner for user input
    	Scanner scanner = new Scanner(System.in);

        while (true) {
        	// Display the menu
            System.out.println("\nLibrary Management System");
            System.out.println("1. Display Books in File");
            System.out.println("2. Add a Book to Your Collection");
            System.out.println("3. Remove a Book from Your Collection");
            System.out.println("4. Display Books in Your Collection");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");

            // Read user's choice
            int choice = scanner.nextInt();
            scanner.nextLine(); 

            
            // Perform actions based on user's choice
            switch (choice) {
                case 1:
                    libraryManager.displayBooksInFile();
                    break;
                case 2:
                    System.out.print("Enter Book ID: ");
                    int id = scanner.nextInt();
                    scanner.nextLine(); 
                    System.out.print("Enter Book Title: ");
                    String title = scanner.nextLine();
                    System.out.print("Enter Book Author: ");
                    String author = scanner.nextLine();
                    libraryManager.addBookToCollection(id, title, author);
                    break;
                case 3:
                    System.out.print("Enter Book ID to Remove: ");
                    int removeId = scanner.nextInt();
                    libraryManager.removeBookFromCollection(removeId);
                    break;
                case 4:
                    libraryManager.displayUserCollectionFromFile(); // Display user's collection from file
                    break;
                case 5:
                    System.out.println("Exiting the Library Management System. Goodbye!");
                    scanner.close();
                    System.exit(0); // Exit the program
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}

//Constructor for the Book class
class Book {
    private int id;
    private String title;
    private String author;

    public Book(int id, String title, String author) {
        this.id = id;
        this.title = title;
        this.author = author;
    }

    // Getter methods for id, title, and author
    public int getId() {
        return id;
    }

    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    // Override the toString method to provide a formatted string representation of the book
    @Override
    public String toString() {
        return "ID: " + id + ", Title: " + title + ", Author: " + author;
    }
}
